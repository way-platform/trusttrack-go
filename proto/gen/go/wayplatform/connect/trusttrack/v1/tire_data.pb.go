// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/connect/trusttrack/v1/tire_data.proto

package trusttrackv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tire pressure monitoring system (TPMS) data for a single tire.
type TireData struct {
	state                                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TirePressureThresholdDetection  float64                `protobuf:"fixed64,1,opt,name=tire_pressure_threshold_detection,json=tirePressureThresholdDetection"`
	xxx_hidden_TireSensorElectricalFault       float64                `protobuf:"fixed64,2,opt,name=tire_sensor_electrical_fault,json=tireSensorElectricalFault"`
	xxx_hidden_TireStatus                      float64                `protobuf:"fixed64,3,opt,name=tire_status,json=tireStatus"`
	xxx_hidden_TireTemperature                 float64                `protobuf:"fixed64,4,opt,name=tire_temperature,json=tireTemperature"`
	xxx_hidden_TireAirLeakageRate              float64                `protobuf:"fixed64,5,opt,name=tire_air_leakage_rate,json=tireAirLeakageRate"`
	xxx_hidden_TirePressure                    float64                `protobuf:"fixed64,6,opt,name=tire_pressure,json=tirePressure"`
	xxx_hidden_TireSensorEnableStatus          float64                `protobuf:"fixed64,7,opt,name=tire_sensor_enable_status,json=tireSensorEnableStatus"`
	xxx_hidden_TireLocation                    float64                `protobuf:"fixed64,8,opt,name=tire_location,json=tireLocation"`
	xxx_hidden_TireExtendedTirePressureSupport float64                `protobuf:"fixed64,9,opt,name=tire_extended_tire_pressure_support,json=tireExtendedTirePressureSupport"`
	XXX_raceDetectHookData                     protoimpl.RaceDetectHookData
	XXX_presence                               [1]uint32
	unknownFields                              protoimpl.UnknownFields
	sizeCache                                  protoimpl.SizeCache
}

func (x *TireData) Reset() {
	*x = TireData{}
	mi := &file_wayplatform_connect_trusttrack_v1_tire_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TireData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TireData) ProtoMessage() {}

func (x *TireData) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_connect_trusttrack_v1_tire_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TireData) GetTirePressureThresholdDetection() float64 {
	if x != nil {
		return x.xxx_hidden_TirePressureThresholdDetection
	}
	return 0
}

func (x *TireData) GetTireSensorElectricalFault() float64 {
	if x != nil {
		return x.xxx_hidden_TireSensorElectricalFault
	}
	return 0
}

func (x *TireData) GetTireStatus() float64 {
	if x != nil {
		return x.xxx_hidden_TireStatus
	}
	return 0
}

func (x *TireData) GetTireTemperature() float64 {
	if x != nil {
		return x.xxx_hidden_TireTemperature
	}
	return 0
}

func (x *TireData) GetTireAirLeakageRate() float64 {
	if x != nil {
		return x.xxx_hidden_TireAirLeakageRate
	}
	return 0
}

func (x *TireData) GetTirePressure() float64 {
	if x != nil {
		return x.xxx_hidden_TirePressure
	}
	return 0
}

func (x *TireData) GetTireSensorEnableStatus() float64 {
	if x != nil {
		return x.xxx_hidden_TireSensorEnableStatus
	}
	return 0
}

func (x *TireData) GetTireLocation() float64 {
	if x != nil {
		return x.xxx_hidden_TireLocation
	}
	return 0
}

func (x *TireData) GetTireExtendedTirePressureSupport() float64 {
	if x != nil {
		return x.xxx_hidden_TireExtendedTirePressureSupport
	}
	return 0
}

func (x *TireData) SetTirePressureThresholdDetection(v float64) {
	x.xxx_hidden_TirePressureThresholdDetection = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *TireData) SetTireSensorElectricalFault(v float64) {
	x.xxx_hidden_TireSensorElectricalFault = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 9)
}

func (x *TireData) SetTireStatus(v float64) {
	x.xxx_hidden_TireStatus = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *TireData) SetTireTemperature(v float64) {
	x.xxx_hidden_TireTemperature = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *TireData) SetTireAirLeakageRate(v float64) {
	x.xxx_hidden_TireAirLeakageRate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 9)
}

func (x *TireData) SetTirePressure(v float64) {
	x.xxx_hidden_TirePressure = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 9)
}

func (x *TireData) SetTireSensorEnableStatus(v float64) {
	x.xxx_hidden_TireSensorEnableStatus = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 9)
}

func (x *TireData) SetTireLocation(v float64) {
	x.xxx_hidden_TireLocation = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 9)
}

func (x *TireData) SetTireExtendedTirePressureSupport(v float64) {
	x.xxx_hidden_TireExtendedTirePressureSupport = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 9)
}

func (x *TireData) HasTirePressureThresholdDetection() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TireData) HasTireSensorElectricalFault() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TireData) HasTireStatus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TireData) HasTireTemperature() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TireData) HasTireAirLeakageRate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TireData) HasTirePressure() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *TireData) HasTireSensorEnableStatus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TireData) HasTireLocation() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *TireData) HasTireExtendedTirePressureSupport() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *TireData) ClearTirePressureThresholdDetection() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_TirePressureThresholdDetection = 0
}

func (x *TireData) ClearTireSensorElectricalFault() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_TireSensorElectricalFault = 0
}

func (x *TireData) ClearTireStatus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_TireStatus = 0
}

func (x *TireData) ClearTireTemperature() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_TireTemperature = 0
}

func (x *TireData) ClearTireAirLeakageRate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_TireAirLeakageRate = 0
}

func (x *TireData) ClearTirePressure() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_TirePressure = 0
}

func (x *TireData) ClearTireSensorEnableStatus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_TireSensorEnableStatus = 0
}

func (x *TireData) ClearTireLocation() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_TireLocation = 0
}

func (x *TireData) ClearTireExtendedTirePressureSupport() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_TireExtendedTirePressureSupport = 0
}

type TireData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Signal indicating the pressure level of the tire. The levels defined represent different pressure conditions of the tire: 000 Extreme over pressure - The tire pressure is at a level where the safety of the vehicle may be jeopardised. 001 Over pressure - The tire pressure is higher than the pressure defined by the vehicle or tire manufacturer. 010 No warning pressure - The tire pressure is within the thresholds defined by the vehicle or tire manufacturer. 011 Under pressure - The tire pressure is lower than the pressure defined by the vehicle or tire manufacturer. 100 Extreme under pressure - The tire pressure is at a level where the safety of the vehicle may be jeopardised. 101 Not defined 110 Error indicator 111 Not available
	TirePressureThresholdDetection *float64
	// Indicates the status of electrical fault on the tire sensor. 00 Ok (No Fault) 01 Not Defined (Fault) 10 Error 11 Not Supported
	TireSensorElectricalFault *float64
	// Indicates the status of the tire. 00 Ok (no fault) 01 Tire leak detected 10 Error 11 Not Supported
	TireStatus *float64
	// Temperature at the surface of the tire sidewall. Resolution: 0.03125 °C/bit Offset: 0 Data Range: -273 to 1734.96875 °C (units: °C)
	TireTemperature *float64
	// The pressure loss rate of a tire. Resolution: 0.05 kPa/bit Offset: 0 Data Range: 0 to 12.5 kPa (units: kPa)
	TireAirLeakageRate *float64
	// Pressure at which air is contained in cavity formed by tire and rim. Resolution: 0.05 kPa/bit Offset: 0 Data Range: 0 to 125 kPa (units: kPa)
	TirePressure *float64
	// Indicates whether the tire sensor is being monitored by the controller or is Enabled/Disabled. 00 Off / Isolated / Disabled 01 On (tire is polled) / Enabled 10 Not Defined 11 Not Supported
	TireSensorEnableStatus *float64
	// Identifies which tire is associated with the parametric data in this PGN. The low order 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle travel (forward). The high order 4 bits represent a position number, counting front to back on the vehicle. The value 0xFF indicates not available. It is recommended that output devices add 1 to the position number (range 1 to 15, not 0 to 14) for use by drivers and service technicians. Examples: Tire pressure for location 0x00 would be left front tire. Tire pressure for location 0x23 would be right outside rear rear on a 3-axle tractor with dual axle per side (3rd axle, 4th tire).
	TireLocation *float64
	// Defines the choice of using the tire pressure (PGN 65268) or Extended Tire Pressure (PGN 64578). The state value '01' indicates the extended tire pressure SPN is used for the pressure data. Any other value indicates the extended tire pressure SPN is not being used. 00 - Not Using Extended Tire Pressure 01 - Using Extended Tire Pressure 10 - Error 11 - Not Available/Not Supported
	TireExtendedTirePressureSupport *float64
}

func (b0 TireData_builder) Build() *TireData {
	m0 := &TireData{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TirePressureThresholdDetection != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_TirePressureThresholdDetection = *b.TirePressureThresholdDetection
	}
	if b.TireSensorElectricalFault != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 9)
		x.xxx_hidden_TireSensorElectricalFault = *b.TireSensorElectricalFault
	}
	if b.TireStatus != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_TireStatus = *b.TireStatus
	}
	if b.TireTemperature != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_TireTemperature = *b.TireTemperature
	}
	if b.TireAirLeakageRate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 9)
		x.xxx_hidden_TireAirLeakageRate = *b.TireAirLeakageRate
	}
	if b.TirePressure != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 9)
		x.xxx_hidden_TirePressure = *b.TirePressure
	}
	if b.TireSensorEnableStatus != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 9)
		x.xxx_hidden_TireSensorEnableStatus = *b.TireSensorEnableStatus
	}
	if b.TireLocation != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 9)
		x.xxx_hidden_TireLocation = *b.TireLocation
	}
	if b.TireExtendedTirePressureSupport != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 9)
		x.xxx_hidden_TireExtendedTirePressureSupport = *b.TireExtendedTirePressureSupport
	}
	return m0
}

var File_wayplatform_connect_trusttrack_v1_tire_data_proto protoreflect.FileDescriptor

const file_wayplatform_connect_trusttrack_v1_tire_data_proto_rawDesc = "" +
	"\n" +
	"1wayplatform/connect/trusttrack/v1/tire_data.proto\x12!wayplatform.connect.trusttrack.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xe8\x03\n" +
	"\bTireData\x12I\n" +
	"!tire_pressure_threshold_detection\x18\x01 \x01(\x01R\x1etirePressureThresholdDetection\x12?\n" +
	"\x1ctire_sensor_electrical_fault\x18\x02 \x01(\x01R\x19tireSensorElectricalFault\x12\x1f\n" +
	"\vtire_status\x18\x03 \x01(\x01R\n" +
	"tireStatus\x12)\n" +
	"\x10tire_temperature\x18\x04 \x01(\x01R\x0ftireTemperature\x121\n" +
	"\x15tire_air_leakage_rate\x18\x05 \x01(\x01R\x12tireAirLeakageRate\x12#\n" +
	"\rtire_pressure\x18\x06 \x01(\x01R\ftirePressure\x129\n" +
	"\x19tire_sensor_enable_status\x18\a \x01(\x01R\x16tireSensorEnableStatus\x12#\n" +
	"\rtire_location\x18\b \x01(\x01R\ftireLocation\x12L\n" +
	"#tire_extended_tire_pressure_support\x18\t \x01(\x01R\x1ftireExtendedTirePressureSupportB\xc0\x02\n" +
	"%com.wayplatform.connect.trusttrack.v1B\rTireDataProtoP\x01Zagithub.com/way-platform/trusttrack-go/proto/gen/go/wayplatform/connect/trusttrack/v1;trusttrackv1\xa2\x02\x03WCT\xaa\x02!Wayplatform.Connect.Trusttrack.V1\xca\x02!Wayplatform\\Connect\\Trusttrack\\V1\xe2\x02-Wayplatform\\Connect\\Trusttrack\\V1\\GPBMetadata\xea\x02$Wayplatform::Connect::Trusttrack::V1b\beditionsp\xe8\a"

var file_wayplatform_connect_trusttrack_v1_tire_data_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_connect_trusttrack_v1_tire_data_proto_goTypes = []any{
	(*TireData)(nil), // 0: wayplatform.connect.trusttrack.v1.TireData
}
var file_wayplatform_connect_trusttrack_v1_tire_data_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wayplatform_connect_trusttrack_v1_tire_data_proto_init() }
func file_wayplatform_connect_trusttrack_v1_tire_data_proto_init() {
	if File_wayplatform_connect_trusttrack_v1_tire_data_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_connect_trusttrack_v1_tire_data_proto_rawDesc), len(file_wayplatform_connect_trusttrack_v1_tire_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_connect_trusttrack_v1_tire_data_proto_goTypes,
		DependencyIndexes: file_wayplatform_connect_trusttrack_v1_tire_data_proto_depIdxs,
		MessageInfos:      file_wayplatform_connect_trusttrack_v1_tire_data_proto_msgTypes,
	}.Build()
	File_wayplatform_connect_trusttrack_v1_tire_data_proto = out.File
	file_wayplatform_connect_trusttrack_v1_tire_data_proto_goTypes = nil
	file_wayplatform_connect_trusttrack_v1_tire_data_proto_depIdxs = nil
}
